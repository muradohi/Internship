import streamlit as st
import os
import pandas as pd
import shutil
import yaml
import subprocess
from ruamel.yaml import YAML
import hydra
import sys

def update_config_file(config_path, updates):
    """
    Updates the YAML configuration file with specific changes while preserving formatting and comments.
    """
    try:
        yaml_obj = YAML()
        yaml_obj.preserve_quotes = True  # Optional: preserve quotes
        with open(config_path, "r") as file:
            config = yaml_obj.load(file)

        def recursive_update(orig, updates):
            for key, value in updates.items():
                if isinstance(value, dict) and key in orig:
                    recursive_update(orig[key], value)
                else:
                    orig[key] = value
        recursive_update(config, updates)

        with open(config_path, "w") as file:
            yaml_obj.dump(config, file)

        st.sidebar.success(f"Configuration updated and saved at {config_path}")
    except Exception as e:
        st.sidebar.error(f"Error updating the configuration file: {e}")

# App title
st.title("Automated Machine Learning Pipeline with PDF Output")

# Step 1: File Upload
st.sidebar.header("Upload CSV File")
uploaded_file = st.sidebar.file_uploader("Upload your dataset (CSV file)", type=["csv"])

if uploaded_file is not None:
    # Save the uploaded file to a temporary directory
    temp_dir = "./temp"
    os.makedirs(temp_dir, exist_ok=True)
    file_path = os.path.join(temp_dir, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.sidebar.success("File uploaded successfully!")
    
    # Display a preview of the uploaded file
    st.subheader("Uploaded Dataset")
    data_df = pd.read_csv(file_path)
    st.write(data_df.head())

    # Step 2: Pipeline Configuration
    st.sidebar.header("Pipeline Configuration")

    # Path to configuration file
    config_path = "/Users/murad/Desktop/Masters_Internship_Project/config/config.yaml"

    # Load the existing configuration
    with open(config_path, "r") as file:
        config = yaml.safe_load(file)

    approach = st.sidebar.selectbox("Select approach", ["h2o", "sklearn"],
                                     index=["h2o", "sklearn"].index(config.get("approach", "sklearn")))
    target_column = st.sidebar.text_input("Target Column", value=config.get("dataset", {}).get("target_column", "Stage"))
    k_features = st.sidebar.slider("Number of Features to Select (k)", 1, 50, config.get("dataset", {}).get("k_features", 20))
    test_size = st.sidebar.slider("Test Size", 0.1, 0.5, config.get("dataset", {}).get("test_size", 0.25), step=0.05)

    if st.sidebar.button("Save Configuration"):
        updates = {
            "approach": approach,
            "dataset": {
                "target_column": target_column,
                "k_features": k_features,
                "test_size": test_size,
            },
        }
        update_config_file(config_path, updates)

    # Step 3: Run the Pipeline
    if st.sidebar.button("Run Pipeline"):
        st.subheader("Running Pipeline...")
        
        # Define save path (for outputs generated by the pipeline)
        save_path = os.path.join(temp_dir, "output")
        os.makedirs(save_path, exist_ok=True)

        # Run the pipeline by calling main.py via subprocess.
        # (Make sure your main.py is configured correctly and uses the updated config.)
        try:
            result = subprocess.run([sys.executable, "main.py"], capture_output=True, text=True)
            #st.text(result.stdout)
            if result.returncode == 0:
                st.success("Pipeline completed successfully!")
            else:
                st.error("Pipeline encountered errors:\n" + result.stderr)
        except Exception as e:
            st.error(f"An error occurred while running the pipeline: {e}")

        # Define the path for the PDF report.
        # Adjust these paths to match those used in your main.py
        report_path = os.path.join("/Users/murad/Desktop/Masters_Internship_Project/report", "exai_report.pdf")
        if os.path.exists(report_path):
            st.subheader("Download PDF Report")
            with open(report_path, "rb") as pdf_file:
                st.download_button(
                    label="Download PDF Report",
                    data=pdf_file,
                    file_name="exai_report.pdf",
                    mime="application/pdf",
                )
        else:
            st.error("PDF report not found.")

    # Clean up temporary files if needed
    if st.sidebar.button("Clear Temporary Files"):
        shutil.rmtree(temp_dir)
        st.sidebar.success("Temporary files cleared.")
